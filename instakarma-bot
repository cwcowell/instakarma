#!/usr/bin/env python3

from action_mgr import ActionMgr
from constants import *
from db_mgr import DbMgr
from enums import *
from entity_mgr import EntityMgr
from grant_mgr import GrantMgr
from karma_mgr import KarmaMgr
from log_mgr import LogMgr
from message_parser import MessageParser
from slack_api_mgr import SlackApiMgr

from logging import Logger
import os

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler


app: App = App(token=os.environ.get("SLACK_BOT_TOKEN"))

# Listen for "++" or "--" in any message in any channel the bot subscribes to.
@app.message(r'(\+\+)|(--)')
def handle_karma_grants(message: dict, say) -> None:
    granter_user_id: str = message['user']
    msg_text: str = message['text']

    valid_user_recipients: list[tuple[str, Action]] = message_parser.detect_valid_user_recipients(msg_text)
    logger.debug("valid user recipients: " + str(valid_user_recipients))

    invalid_user_recipients: list[tuple[str, Action]] = message_parser.detect_invalid_user_recipients(msg_text)
    logger.debug("invalid user recipients: " + str(invalid_user_recipients))

    object_recipients: list[tuple[str, Action]] = message_parser.detect_object_recipients(msg_text)
    logger.debug("object recipients: " + str(object_recipients))

    amount: int
    verb: str

    for recipient in valid_user_recipients:
        grant_handler.grant_to_valid_user(say, granter_user_id, recipient)

    for recipient in invalid_user_recipients:
        grant_handler.grant_to_invalid_user(say, granter_user_id, recipient)

    for recipient in object_recipients:
        grant_handler.grant_to_object(say, granter_user_id, recipient)


@app.command('/instakarma')
def handle_instakarma_command(ack, respond, command) -> None:
    ack()
    parameter = command['text'].lower()

    if parameter in ['help', '']:
        action_manager.help(respond)
        return

    if parameter == 'leaderboard':
        action_manager.leaderboard(respond)
        return

    if parameter == 'my-stats':
        action_manager.my_stats(command, respond, entity_manager, karma_manager)
        return

    if parameter == 'opt-in':
        action_manager.set_status(command, respond, Status.OPTED_IN, entity_manager)
        return

    if parameter == 'opt-out':
        action_manager.set_status(command, respond, Status.OPTED_OUT, entity_manager)
        return

    respond(f":x: Sorry, */instakarma {parameter}* isn't a valid command")
    action_manager.help(respond)


@app.event("message")
def handle_message_events(body, logger):
    pass  # suppress console output that normally comes from every message


if __name__ == "__main__":
    slack_message_handler: SocketModeHandler = SocketModeHandler(app=app,
                                                                 app_token=os.environ["SLACK_APP_TOKEN"])

    logger: Logger = LogMgr.get_logger(LOGGER_NAME,
                                       LOG_FILE,
                                       LOG_LEVEL,
                                       LOG_FILE_SIZE,
                                       LOG_FILE_COUNT)
    db_manager: DbMgr = DbMgr(logger)
    slack_api_manager: SlackApiMgr = SlackApiMgr(app, logger)
    action_manager: ActionMgr = ActionMgr(db_manager, logger)
    entity_manager: EntityMgr = EntityMgr(db_manager, logger, slack_api_manager)
    karma_manager: KarmaMgr = KarmaMgr(db_manager, entity_manager, logger)
    message_parser: MessageParser = MessageParser(logger)
    grant_handler: GrantMgr = GrantMgr(entity_manager, karma_manager, logger, message_parser, db_manager)

    db_manager.init_db()

    slack_message_handler.start()  # launch the Slack listener
