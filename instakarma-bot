#!/usr/bin/env python3

from db_manager import DbManager
from entity_manager import EntityManager
from enums import *
from exceptions import *
from karma_manager import KarmaManager
from log_manager import LogManager
from message_parser import MessageParser
import response_blocks

from logging import Logger
import os

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler


app: App = App(token=os.environ.get("SLACK_BOT_TOKEN"))


# Listen for "++" or "--" in any message in any channel the bot subscribes to.
@app.message(r'(\+\+)|(--)')
def handle_karma_grants(message: dict, say) -> None:
    with db_manager.get_db_connection() as conn:
        granter_user_id: str = message['user']
        msg_text: str = message['text']

        valid_user_recipients: list[tuple[str, Action]] = message_parser.detect_valid_user_recipients(msg_text)
        logger.debug("recognized user recipients: " + str(valid_user_recipients))

        invalid_user_recipients: list[tuple[str, Action]] = message_parser.detect_invalid_user_recipients(msg_text)
        logger.debug("unrecognized user recipients: " + str(invalid_user_recipients))

        object_recipients: list[tuple[str, Action]] = message_parser.detect_object_recipients(msg_text)
        logger.debug("object recipients: " + str(object_recipients))

        amount: int
        verb: str

        for recipient in valid_user_recipients:
            recipient_user_id: str = recipient[0]
            action: Action = recipient[1]
            amount, verb = message_parser.get_amount_and_verb(recipient)

            granter_name: str = entity_manager.get_name_from_user_id(conn, granter_user_id)
            recipient_name: str = entity_manager.get_name_from_user_id(conn, recipient_user_id)

            if action == Action.DECREMENT:
                logger.info(f"'{granter_name}' tried to reduce karma of a person with name '{recipient_name}'")
                say('Sorry, you can only remove karma from things (python--), not people (@elvis--)')
                continue

            if recipient_name == granter_name:
                logger.info(f"'{granter_name}' tried to self-grant {amount} karma")
                say(f"Sorry, you can't self-grant karma")
                continue

            try:
                karma_manager.grant_karma(conn, granter_name, recipient_name, amount)
                recipient_total_karma: int = karma_manager.get_karma(conn, recipient_name)
                say(f"<{recipient_name}> {verb}, now has {recipient_total_karma} karma")
            except DisabledEntityError:
                logger.info(f"'{granter_name}' tried to grant karma to disabled entity '{recipient_name}'")
                say(f"Sorry, {recipient_name} isn't participating in Instakarma")

        for recipient in invalid_user_recipients:
            granter_name: str = entity_manager.get_name_from_user_id(conn, granter_user_id)
            recipient_name: str = recipient[0]
            amount, verb = message_parser.get_amount_and_verb(recipient)
            logger.info(f"'{granter_name}' tried to grant '{amount}' karma "
                        f"to unrecognized name '{recipient_name}'")
            say(f"Sorry, I don't recognize the user {recipient_name}")

        for recipient in object_recipients:
            granter_name: str = entity_manager.get_name_from_user_id(conn, granter_user_id)
            recipient_name: str = recipient[0]
            amount, verb = message_parser.get_amount_and_verb(recipient)
            entity_manager.add_object_entity(conn, recipient_name)
            try:
                karma_manager.grant_karma(conn, granter_name, recipient_name, amount)
                recipient_total_karma: int = karma_manager.get_karma(conn, recipient_name)
                say(f"{recipient_name} {verb}, now has {recipient_total_karma} karma.")
            except DisabledEntityError:
                logger.info(f"'{granter_name}' can't grant karma to disabled entity '{recipient_name}'")
                say(f"Sorry, {recipient_name} is not participating in Instakarma")


@app.command('/instakarma')
def handle_instakarma_command(ack, respond, command) -> None:
    ack()
    parameter = command['text'].lower()

    if parameter in ['help', '']:
        respond(text="instakarma usage",
                blocks=response_blocks.help,
                response_type='ephemeral')

    if parameter == 'my-stats':
        name: str = '@' + command['user_name']
        with db_manager.get_db_connection() as conn:
            status: Status = entity_manager.get_status_from_db(conn, name)
        if status == status.DISABLED:
            respond(text=f"{name} is disabled, so can't see your stats",
                    blocks=response_blocks.my_stats_disabled(name),
                    response_type='ephemeral')
            return

        your_karma_text: str = f">You have *{karma_manager.get_karma(conn, name)}* karma\n"

        top_recipients_text: str = ''
        top_recipients: list[tuple[str, int]] = karma_manager.get_top_recipients(conn, name)
        if top_recipients:
            top_recipients_text = ">*Your top karma recipients*\n"
            for recipient in top_recipients:
                top_recipients_text += f">• {str(recipient[1])} to {recipient[0]}\n"

        top_granters_text: str = ''
        top_granters: list[tuple[str, int]] = karma_manager.get_top_granters(conn, name)
        if top_granters:
            top_granters_text = ">*Your top karma granters*\n"
            for granter in top_granters:
                top_granters_text += f">• {str(granter[1])} from {granter[0]}\n"

        respond(text=f"instakarma stats for {name}",
                blocks=response_blocks.my_stats(name, your_karma_text, top_recipients_text, top_granters_text),
                response_type='ephemeral')

    if parameter == 'disable-me':
        name: str = '@' + command['user_name']
        with db_manager.get_db_connection() as conn:
            entity_manager.change_user_status(conn, name, Status.DISABLED)
        respond(text=f"{name} is disabled in instakarma",
                blocks=response_blocks.disable_me,
                response_type='ephemeral')

    if parameter == 'enable-me':
        name: str = '@' + command['user_name']
        with db_manager.get_db_connection() as conn:
            entity_manager.change_user_status(conn, name, Status.ENABLED)
        respond(text=f"{name} is enabled in instakarma",
                blocks=response_blocks.enable_me,
                response_type='ephemeral')

    if parameter == 'leaderboard':
        respond(text="TODO",
                blocks=response_blocks.leaderboard,
                response_type="ephemeral")


if __name__ == "__main__":
    slack_message_handler: SocketModeHandler = SocketModeHandler(app=app, app_token=os.environ["SLACK_APP_TOKEN"])

    logger: Logger = LogManager.get_logger()
    db_manager: DbManager = DbManager(logger, slack_message_handler)
    entity_manager: EntityManager = EntityManager(db_manager, logger, app)
    karma_manager: KarmaManager = KarmaManager(db_manager, entity_manager, logger)
    message_parser: MessageParser = MessageParser(logger)

    db_manager.init_db()

    # launch the Slack listener
    slack_message_handler.start()
