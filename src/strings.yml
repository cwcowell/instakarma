# User-facing text lives in this file for easy editing

action:
  help:
    respond-text: "instakarma usage"
  leaderboard:
    leader-text-when-no-karma: "no objects have karma"
    respond-text: "show karma of objects"
    sqlite3-error: "couldn't get karma of all objects: {e}"
  my-stats:
    my-karma: "you have *{amount}* karma"
    my-karma-header: "*How much karma do I have?*"
    opt-in-instructions: "to opt in, type */instakarma opt-in*"
    opted-out: "you opted out of instakarma, so you can't see karma stats"
    respond-text: "instakarma stats for {name}"
    top-granter: "• {amount} from {granter_name}"
    top-granters-header: "*Who has given me the most karma?*"
    top-granters-none: "you haven't received any karma"
    top-negative-recipients-header: "*What have I given the most negative karma to?*"
    top-negative-recipients-none: "you haven't give any negative karma"
    top-positive-recipients-header: "*Who have I given the most karma to?*"
    top-positive-recipients-none: "you haven't given any karma"
    top-recipient: "• {amount} to {recipient_name}"
    your-karma-text-when-user-not-in-db: "you haven't given or received any karma"
  set-status:
    respond-text: "{name} is now {status}"

db:
  backed-up: "'{db_file_path}' backed up to '{db_backup_file_path}'"
  created-new: "created new DB at '{db_path}' using DDL '{db_ddl_path}'"
  exists: "DB already exists at '{db_path}', so no changes were made"
  error:
    connection: "error: couldn't connect to database file {db_file_name!r}: {e}"
    could-not-backup: "error: DB backup failed: {e}"
    could-not-create: "error: couldn't create DB: {e}"
    could-not-truncate: "error: couldn't truncate DB, so aborted the DB backup: {e}"
    db-backup-file-exists: "error: DB backup file already exists at '{db_backup_path}', so backup was aborted"
    no-db-file: "error: no DB file at '{db_path}' to back up"
    rollback: "error: rolled back after failed query: {statement!r} | parms: {parms!r} | error: {e}"
    truncation-blocked: "error: DB truncation blocked by another process -- backup aborted"
  truncated: "DB truncated into single file at '{single_db_file}'"

entity:
  current-status: "{name!r} now has status {status!r}"
  error:
    could-not-add-entity: "couldn't add entity with name {name!r} and user_id {user_id!r}: {e}"
    could-not-add-name-and-user-id: "couldn't add row with name {name!r} and user_id {user_id!r} to entities table: {e}"
    could-not-check-name: "couldn't check if name {name!r} exists in 'entities' table: {e}"
    could-not-check-user-id: "couldn't check if user_id {user_id!r} exists in 'entities' table: {e}"
    could-not-get-name-from-user-id: "couldn't look up name for user_id {user_id!r}: {e}"
    could-not-list-entities: "couldn't retrieve list of entities: {e}"
    could-not-list-opted-out: "couldn't retrieve list of opted-out entities: {e}"
    could-not-set-name: "couldn't set name to {name!r} for user_id of {user_id!r}: {e}"
    could-not-set-status: "couldn't set user {name!r} status to {status!r}: {e}"
    no-status: "couldn't get status for {name!r}: {e}"
    not-in-db: "{name!r} doesn't exist in 'entities' table"

error:
  general: "error: {e}"
  invalid-slash-subcommand: ":x: Sorry, */instakarma {subcommand}* isn't a valid command"
  malformed-yaml: "<STRING FOR {undefined_key_path!r} IS UNDEFINED DUE TO MALFORMED YAML>"
  sqlite3: "SQLite3 error: {e}"
  undefined-string: "<STRING FOR {undefined_key_path!r} IS UNDEFINED>"

grant:
  success: "{emoji} <{recipient_name}> {verb}, now has {recipient_total_karma} karma"
  granter-opted-out: ":x: sorry, you can't grant karma because you've opted out of instakarma\nto opt in, type */instakarma opt-in*"
  grants-exported: "all grants exported to '{grants_export_file_path}'"
  invalid-person: ":x: sorry, user {recipient_name} isn't registered in Slack"
  log:
    error:
      export-file-exists: "aborted export because '{grants_export_file_path}' already exists"
      no-name-for-user-id: "couldn't grant karma because couldn't get name for user_id {user_id!r}"
      write-file: "error writing to {grants_export_file_path!r}: {e}"
    info:
      invalid-person: "{granter_name!r} tried to grant {amount!r} karma to invalid person {recipient_name!r}"
      remove-karma-from-person: "{granter_name!r} tried to reduce karma of a Slack user {recipient_name!r}"
      self-grant: "{granter_name!r} tried to self-grant {amount} karma"
  recipient-opted-out: ":x: sorry, {name} opted out of instakarma"
  remove-karma-from-person: ":x: sorry, you can't remove karma from Slack users"
  self-grant: ":x: sorry, you can't grant karma to yourself"

instakarma-admin:
  add-entity:
    failed: "{name!r} already exists in DB"
    successful: "added {name!r} to the DB"
  current-status: "{name!r} now has {status!r} status"
  description: "instakarma-admin: a set of admin tools for the instakarma bot"
  epilog: "author: Chris Cowell (christopher.cowell@instabase.com)"
  help:
    add-entity:
      command: "add user or object to DB with 'opt-in' status and 0 karma (this happens automatically as users interact with instakarma-bot)"
      name-var: "name of the user (like '@bob') or entity (like 'python') to add"
    backup-db: "make a local backup of the DB"
    export-grants: "export history of all grants"
    list-by-karma: "list all entities in descending karma order"
    list-by-name: "list all entities in alphabetical order"
    list-opted-out: "list all opted-out entities"
    opt-in:
      command: "allow a user (like @bob) to give and receive karma, or an object (like python) to receive karma"
      name-var: "name of the user (like '@bob') or entity (like 'python') to opt in"
    opt-out:
      command: "prevent a user (like @bob) from giving or receiving karma, or an object (like python) from receiving karma"
      name-var: "name of the user (like '@bob') or entity (like 'python') to opt out"
  no-entity-exists: "no user with name {name!r} exists in the DB"
  nobody-opted-out: "nobody has opted out"
  prog: "instakarma-admin"

karma:
  get-karma:
    opted-out: "{name!r} is opted-out or doesn't exist in 'entities' table"
    sql-error: "couldn't get karma for {name!r}: {e}"
  get-top-granters:
    sql-error: "couldn't get biggest granters to {name!r}: {e}"
  get-top-recipients:
    sql-error: "couldn't get biggest recipients from {name!r}: {e}"
  grant-karma:
    granted: "{granter_name!r} granted {amount!r} karma to {recipient_name!r}"
    granter-opted-out: "opted-out {granter_name!r} can't grant {amount!r} karma to {recipient_name!r}"
    recipient-opted-out: "{granter_name!r} can't grant {amount!r} karma to opted-out {recipient_name!r}"
    sql-error: "{granter_name!r} couldn't grant {amount!r} karma to {recipient_name!r}: {e}"

message-parser:
  decrement:
    emoji: ":dumpster_fire:"
    verb: "took a hit"
  increment:
    emoji: ":thumbsup_all:"
    verb: "leveled up"
  unrecognized:
    emoji: ':question:'
    log-msg: "unrecognized action: {action!r}"
    verb: 'unrecognized'

response-blocks:
  change-status:
    current-status: "you're now {status}"
    opt-in-instructions: "to opt in, type */instakarma opt-in*"
    opt-out-instructions: "to opt out, type */instakarma opt-out*"
  help:
    header: "How do I use instakarma?"
    section: |
      *@robin++*   give 1 karma to Slack user *@robin*
      *python++*   give 1 karma to non-Slack user *python*
      *python--*   remove 1 karma from non-Slack user *python*
      
      _optionally add a space between *recipient* and *++* or *--*_
      _you must invite *@instakarma* to channels or multi-person DMs in order to give karma_
      
      */instakarma help*   display this usage guide
      */instakarma leaderboard*   see the karma of all non-Slack users
      */instakarma my-stats*   see your karma and top granters and receivers
      */instakarma opt-in*   participate in instakarma (this is the default status)
      */instakarma opt-out*   don't participate in instakarma
      
      _contact christopher.cowell@instabase.com or <@chris cowell> with problems_
  leaderboard:
    header: "How much karma do objects and non-users have?"
  my-stats:
    header: "Instakarma stats for {name}"

slack-api:
  error: "Slack API call failed: {response}"
