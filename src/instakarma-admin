#!/usr/bin/env python3

import os

if os.path.basename(os.getcwd()) != 'src':
    raise SystemExit("Error: 'instakarma-admin' must be run from the '<REPO-ROOT>/src/' directory")

from constants import *
from db_mgr import DbMgr
from entity import Entity
from entity_dao import EntityDAO
from entity_mgr import EntityMgr
from enums import Status
from grant_mgr import GrantMgr
from karma_mgr import KarmaMgr
from log_mgr import LogMgr
from message_parser import MessageParser
from string_mgr import StringMgr

import argparse
from argparse import ArgumentParser
from logging import Logger
import sqlite3


def init_db() -> None:
    """Initialize the DB.

    No-op if the DB already exists.

    :raises SystemExit: If there are DB errors
    """

    result: str = ''
    try:
        result: str = db_mgr.init_db()
    except sqlite3.Error as e:
        raise SystemExit(StringMgr.get_string(key_path='error.sqlite3', e=e))
    if not result.startswith('DB already exists'):
        print(result)


def set_status(name: str, new_status: Status) -> None:
    """Set the opted-in/opted-out status of an entity.

    Also prints the entity's new status.
    Intended to be called from `instakarma-admin` only.

    :raises SystemExit: If there are DB errors or the entity doesn't exist in the DB
    """

    entity_dao = EntityDAO(db_mgr, logger)
    entity: Entity = Entity(name=name)
    try:
        if not entity_dao.is_in_db(entity):
            raise SystemExit(StringMgr.get_string(key_path='instakarma-admin.no-entity-exists', name=name))
        entity_dao.set_status(entity, new_status)
    except sqlite3.Error as e:
        raise SystemExit(StringMgr.get_string(key_path='error_sqlite3', e=e))
    print(StringMgr.get_string(key_path='instakarma-admin.current-status',
                               name=name,
                               status=entity_manager.get_status(name).value))


def main() -> None:
    """Parse CLI parameters and handle each valid parameter."""

    parser: ArgumentParser = argparse.ArgumentParser(
        description=StringMgr.get_string('instakarma-admin.description'),
        prog=StringMgr.get_string('instakarma-admin.prog'),
        epilog=StringMgr.get_string('instakarma-admin.epilog'))

    subparsers = parser.add_subparsers(dest='command')

    add_entity_parser = subparsers.add_parser('add-entity',
                                              help=StringMgr.get_string('instakarma-admin.help.add-entity.command'))
    add_entity_parser.add_argument('name',
                                   help=StringMgr.get_string('instakarma-admin.help.add-entity.name-var'),
                                   metavar='NAME')

    subparsers.add_parser('backup-db', help=StringMgr.get_string('instakarma-admin.help.backup-db'))
    subparsers.add_parser('export-grants', help=StringMgr.get_string('instakarma-admin.help.export-grants'))
    subparsers.add_parser('list-by-created-at', help=StringMgr.get_string('instakarma-admin.help.list-by-created-at'))
    subparsers.add_parser('list-by-karma', help=StringMgr.get_string('instakarma-admin.help.list-by-karma'))
    subparsers.add_parser('list-by-name', help=StringMgr.get_string('instakarma-admin.help.list-by-name'))
    subparsers.add_parser('list-opted-out', help=StringMgr.get_string('instakarma-admin.help.list-opted-out'))

    opt_in_parser = subparsers.add_parser('opt-in',
                                          help=StringMgr.get_string('instakarma-admin.help.opt-in.command'))
    opt_in_parser.add_argument('name',
                               help=StringMgr.get_string('instakarma-admin.help.opt-in.name-var'),
                               metavar='NAME')

    opt_out_parser = subparsers.add_parser('opt-out',
                                           help=StringMgr.get_string('instakarma-admin.help.opt-out.command'))
    opt_out_parser.add_argument('name',
                                help=StringMgr.get_string('instakarma-admin.help.opt-out.name-var'),
                                metavar='NAME')

    args: argparse.Namespace = parser.parse_args()

    # print help if no command is provided
    if not args.command:
        parser.print_help()
        raise SystemExit()

    match args.command:
        case 'add-entity':
            name: str = args.name
            entity: Entity = Entity(name=name)
            entity_dao: EntityDAO = EntityDAO(db_mgr, logger)
            try:
                if entity_dao.is_in_db(entity):
                    raise SystemExit(StringMgr.get_string(key_path='instakarma-admin.add-entity.failed', name=name))
                entity_dao.add(entity)
            except sqlite3.Error as e:
                raise SystemExit(StringMgr.get_string(key_path='error.sqlite3', e=e))
            print(StringMgr.get_string(key_path='instakarma-admin.add-entity.successful', name=name))

        case 'backup-db':
            db_mgr.backup_db()

        case 'export-grants':
            grant_manager.export_grants()

        case 'list-by-karma':
            entity_dao: EntityDAO = EntityDAO(db_mgr, logger)
            try:
                entities = entity_dao.list_by('karma')
            except sqlite3.Error as e:
                raise SystemExit(StringMgr.get_string(key_path='error.sqlite3', e=e))
            for entity in entities:
                print(f"{entity.karma},{entity.name},{entity.user_id}")

        case 'list-by-name':
            entity_dao: EntityDAO = EntityDAO(db_mgr, logger)
            try:
                entities = entity_dao.list_by('name')
            except sqlite3.Error as e:
                raise SystemExit(StringMgr.get_string(key_path='error.sqlite3', e=e))
            for entity in entities:
                print(f"{entity.name},{entity.user_id},{entity.karma}")

        case 'list-by-created-at':
            entity_dao: EntityDAO = EntityDAO(db_mgr, logger)
            try:
                entities = entity_dao.list_by('created_at')
            except sqlite3.Error as e:
                raise SystemExit(StringMgr.get_string(key_path='error.sqlite3', e=e))
            for entity in entities:
                print(f"{entity.created_at},{entity.name},{entity.user_id},{entity.karma}")

        case 'list-opted-out':
            entity_dao = EntityDAO(db_mgr, logger)
            entities: list[Entity] = entity_dao.list_opted_out()
            if not entities:
                print(StringMgr.get_string('instakarma-admin.nobody-opted-out'))
            for entity in entities:
                print(entity.name)

        case 'opt-in':
            set_status(args.name, Status.OPTED_IN)

        case 'opt-out':
            set_status(args.name, Status.OPTED_OUT)


if __name__ == '__main__':
    logger: Logger = LogMgr.get_logger(LOGGER_NAME,
                                       LOG_FILE,
                                       LOG_LEVEL,
                                       LOG_FILE_SIZE,
                                       LOG_FILE_COUNT)
    db_mgr: DbMgr = DbMgr(logger)
    entity_manager: EntityMgr = EntityMgr(db_mgr, logger)
    karma_manager: KarmaMgr = KarmaMgr(db_mgr, entity_manager, logger)
    message_parser: MessageParser = MessageParser(logger)
    grant_manager: GrantMgr = GrantMgr(entity_manager, karma_manager, logger, message_parser, db_mgr)

    init_db()  # error handling is easier if there's a DB guaranteed to be present
    main()
