#!/usr/bin/env python3

from constants import *
from db_mgr import DbMgr
from entity_mgr import EntityMgr
from enums import Status
from grant_mgr import GrantMgr
from karma_mgr import KarmaMgr
from log_mgr import LogMgr
from message_parser import MessageParser
from string_mgr import StringMgr

from argparse import ArgumentParser
import argparse
from logging import Logger
import sqlite3
import sys


def init_db() -> None:
    """ Initialize the DB with every restart to simplify error handling. """
    result: str = ''
    try:
        result: str = db_manager.init_db()
    except sqlite3.Error as e:
        sys.exit(f"error when initializing DB: {e}")
    if not result.startswith('DB already exists'):
        print(result)

def set_status(name: str, new_status: Status) -> None:
    try:
        if not entity_manager.name_exists_in_db(name):
            sys.exit(f"no user with name {name!r} in the DB, so no changes were made")
        entity_manager.set_status(name, new_status)
    except sqlite3.Error as e:
        sys.exit(f"error: {e}")
    print(f"{name!r} now has {entity_manager.get_status(name).value!r} status")

def main() -> None:
    parser: ArgumentParser = argparse.ArgumentParser(
        description='instakarma-admin: a set of admin tools for the instakarma bot',
        prog='instakarma-admin',
        epilog='author: Chris Cowell (christopher.cowell@instabase.com')

    subparsers = parser.add_subparsers(dest='command', required=True)

    add_entity_parser = subparsers.add_parser('add-entity',
                                              help="Add user or object to DB with 'opt-in' status and 0 karma. "
                                                   "Normally this happens automatically as 'instakarma-bot' runs and "
                                                   "users interact with it.")
    add_entity_parser.add_argument('name',
                                   help="Name of the user (like '@bob') or entity (like 'python') to add",
                                   metavar='NAME')

    subparsers.add_parser('backup-db', help=f"Make a local backup of the DB")

    subparsers.add_parser('export-grants', help=f"Export history of all grants")

    subparsers.add_parser('init-db', help=f"Initialize the DB if it doesn't exist, no-op if it does")

    subparsers.add_parser('list-by-karma', help="List all entities in descending karma order")

    subparsers.add_parser('list-by-name', help="List all entities in alphabetical order")

    subparsers.add_parser('list-opted-out', help="List all opted-out entities")

    opt_in_parser = subparsers.add_parser('opt-in',
                                          help="Allow a user like @bob to give and receive karma, "
                                               "or an object like python to receive karma")
    opt_in_parser.add_argument('name', help="Name of the user (like '@bob') or entity (like 'python') to opt in",
                               metavar='NAME')

    opt_out_parser = subparsers.add_parser('opt-out',
                                           help="Prevent a user like @bob from giving or receiving karma, "
                                                "or an object like python from receiving karma")
    opt_out_parser.add_argument('name', help="Name of the user (like '@bob') or entity (like 'python') to opt out",
                                metavar='NAME')

    args: argparse.Namespace = parser.parse_args()

    match args.command:
        case 'add-entity':
            name: str = args.name
            try:
                if entity_manager.name_exists_in_db(name):
                    sys.exit(f"entity with name {name!r} already exists in the DB, so no changes were made")
                entity_manager.add_entity(name, None)
            except sqlite3.Error as e:
                sys.exit(StringMgr.get_string('error.sqlite3.general', e=e))
            # print(f"added entity {name!r} to the DB")
            print(StringMgr.get_string("instakarma-admin.status.add_entity", name=name))

        case 'backup-db':
            db_manager.backup_db()

        case 'export-grants':
            grant_manager.export_grants()

        case 'list-by-karma':
            try:
                entities = entity_manager.list_entities('karma')
            except sqlite3.Error as e:
                sys.exit(StringMgr.get_string('error.sqlite3.general', e=e))
            for name, karma in entities:
                print(f"{karma},{name}")

        case 'list-by-name':
            try:
                entities = entity_manager.list_entities('name')
            except sqlite3.Error as e:
                sys.exit(StringMgr.get_string('error.sqlite3.general', e=e))
            for name, karma in entities:
                print(f"{name},{karma}")

        case 'list-opted-out':
            try:
                entities = entity_manager.list_opted_out_entities()
            except sqlite3.Error as e:
                sys.exit(StringMgr.get_string('error.sqlite3.general', e=e))
            for name in entities:
                print(name)

        case 'opt-in':
            set_status(args.name, Status.OPTED_IN)

        case 'opt-out':
            set_status(args.name, Status.OPTED_OUT)


if __name__ == '__main__':
    logger: Logger = LogMgr.get_logger(LOGGER_NAME,
                                       LOG_FILE,
                                       LOG_LEVEL,
                                       LOG_FILE_SIZE,
                                       LOG_FILE_COUNT)
    db_manager: DbMgr = DbMgr(logger)
    entity_manager: EntityMgr = EntityMgr(db_manager, logger)
    karma_manager: KarmaMgr = KarmaMgr(db_manager, entity_manager, logger)
    message_parser: MessageParser = MessageParser(logger)
    grant_manager: GrantMgr = GrantMgr(entity_manager, karma_manager, logger, message_parser, db_manager)

    init_db()
    main()
