#!/usr/bin/env python3

from constants import *
from db_mgr import DbMgr
from entity_mgr import EntityMgr
from enums import Status
from grant_mgr import GrantMgr
from karma_mgr import KarmaMgr
from log_mgr import LogMgr

from argparse import ArgumentParser
import argparse
from logging import Logger
from typing import Literal

from message_parser import MessageParser


def change_status(name: str, status: Literal['opt-out', 'opt-in']) -> None:
    new_status: Status = Status.OPT_IN if status == 'opt-in' else Status.OPT_OUT
    entity_manager.change_entity_status(name, new_status)


def print_status(name: str) -> None:
    print(f"'{name}' now has '{entity_manager.get_status(name).value}' status")


def main() -> None:
    parser: ArgumentParser = argparse.ArgumentParser(
        description='instakarma-admin: a set of admin tools for the instakarma bot',
        prog='instakarma-admin',
        epilog='author: Chris Cowell (christopher.cowell@instabase.com')

    subparsers = parser.add_subparsers(dest='command', required=True)
    add_entity_parser = subparsers.add_parser('add-entity',
                                              help="Add user or object to DB with 'opt-in' status and 0 karma. "
                                                   "Normally this happens automatically as 'instakarma-bot' runs and "
                                                   "users interact with it.")
    add_entity_parser.add_argument('name',
                                   help="Name of the user (like '@bob') or entity (like 'python') to add",
                                   metavar='NAME')

    subparsers.add_parser('backup-db', help=f"Make a local backup of the DB")
    subparsers.add_parser('export-grants', help=f"Export history of all grants")
    subparsers.add_parser('init-db', help=f"Initialize the DB if it doesn't exist, no-op if it does")
    subparsers.add_parser('list-by-karma', help="List all entities in descending karma order")
    subparsers.add_parser('list-by-name', help="List all entities in alphabetical order")

    opt_in_parser = subparsers.add_parser('opt-in',
                                          help="Allow a user like @bob to give and receive karma, "
                                               "or an object like python to receive karma")
    opt_in_parser.add_argument('name', help="Name of the user (like '@bob') or entity (like 'python') to opt in",
                               metavar='NAME')

    opt_out_parser = subparsers.add_parser('opt-out',
                                           help="Prevent a user like @bob from giving or receiving karma, "
                                                "or an object like python from receiving karma")
    opt_out_parser.add_argument('name', help="Name of the user (like '@bob') or entity (like 'python') to opt out",
                                metavar='NAME')

    args: argparse.Namespace = parser.parse_args()

    if args.command == 'add-entity':
        # TODO: report if user already exists in DB
        name: str = args.name
        entity_manager.add_entity(name, None)
        print(f"Added entity {name}")
    elif args.command == 'backup-db':
        # TODO: what happens if no DB file is there?
        db_manager.backup_db()
    elif args.command == 'export-grants':
        grant_manager.export_grant_history()
    elif args.command == 'init-db':
        # TODO: what happens if error?
        result: str = db_manager.init_db()
        print(result)
    elif args.command == 'list-by-karma':
        entities = entity_manager.list_entities('karma')
        for entity in entities:
            name: str = entity[0]
            karma: int = entity[1]
            print(f"{karma},{name}")
    elif args.command == 'list-by-name':
        entities = entity_manager.list_entities('name')
        for entity in entities:
            name: str = entity[0]
            karma: int = entity[1]
            print(f"{name},{karma}")
    elif args.command == 'opt-in':
        # TODO what happens if name doesn't exist in DB?
        entity_manager.change_entity_status(args.name, Status.OPT_IN)
        print_status(args.name)
    elif args.command == 'opt-out':
        # TODO what happens if name doesn't exist in DB?
        entity_manager.change_entity_status(args.name, Status.OPT_OUT)
        print_status(args.name)
    else:
        print("Subcommand not recognized")


if __name__ == '__main__':
    logger: Logger = LogMgr.get_logger(ADMIN_LOGGER_NAME,
                                       ADMIN_LOG_FILE,
                                       ADMIN_LOG_LEVEL,
                                       ADMIN_LOG_FILE_SIZE,
                                       ADMIN_LOG_FILE_COUNT)
    db_manager: DbMgr = DbMgr(logger)
    entity_manager: EntityMgr = EntityMgr(db_manager, logger)
    karma_manager: KarmaMgr = KarmaMgr(db_manager, entity_manager, logger)
    message_parser: MessageParser = MessageParser(logger)
    grant_manager: GrantMgr = GrantMgr(entity_manager, karma_manager, logger, message_parser, db_manager)
    main()
